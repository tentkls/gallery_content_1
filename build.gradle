import groovy.json.JsonSlurper

def artifactsPath = "build/"

def execute(String[] command) {
    def out = new ByteArrayOutputStream()
    exec {
        commandLine command
        standardOutput = out
    }
    return out.toString().trim()
}

static def getLastCommitHash() {
    return execute("git", "rev-parse", "--short", "HEAD")
}

static def getLastCommitChangeList(String hash) {
    def files = execute("git", "show", "--oneline", "--name-only", hash).split("\n")
    if (files.length > 1) {
        return files[1]
    } else {
        return null
    }
}

static def download(String address, String destination) {
    new File(destination).withOutputStream { out ->
        out << new URL(address).openStream()
    }
}

def translate(String text, String lng, String apiKey) {
    def baseUrl = new URL("https://translate.yandex.net/api/v1.5/tr.json/translate")
    def queryString = String.format("key=%s&text=%s&lang=%s", apiKey, text, lng)
    def connection = baseUrl.openConnection()
    connection.with {
        doOutput = true
        requestMethod = 'POST'
        outputStream.withWriter { writer ->
            writer << queryString
        }
        return new JsonSlurper().parseText(content.text).text[0]
    }
}

def prepareApplicationResources(def json) {
    new File(String.format(artifactPath, "content.json")).withWriter { writer ->
        writer.write(json.toString())
    }

    def properties = String.format("app_name=%s\nad_page=%s\npackage_name=com.gallery.gallery%s", json.title, json.adPage, json.uniqueTag)
    new File(String.format(artifactPath, "content.properties")).withWriter { writer ->
        writer.write(properties)
    }

    def stringResources = String.format("<resources><string name=\"app_name\">%s</string></resources>", json.title)
    new File(String.format(artifactPath, "strings.xml")).withWriter { writer ->
        writer.write(stringResources)
    }
}

def prepareApplicationDescription(def json) {
    def title = json.title
    def shortDescription = json.shortDescription
    def description = json.description

    def fullTitle = '' << ''
    def fullShortDescription = '' << ''
    def fullDescription = '' << ''

    def languages = ["en", "de", "it", "es", "pt", "ru", "fr"]
    def apiKey = "trnsl.1.1.20140730T124426Z.488c3627d8ae111c.6f11fb4603c23545d229a79e96d04a7400b864dd"
    languages.each { def lng ->
        fullTitle <<= lng + "\n" + translate(title, lng, apiKey) + "\n\n"
        fullShortDescription <<= lng + "\n" + translate(shortDescription, lng, apiKey) + "\n\n"
        fullDescription <<= lng + "\n" + translate(description, lng, apiKey) + "\n\n"
    }

    new File("../app/title.txt").withWriter { writer ->
        writer.write(fullTitle.toString())
    }
    new File("../app/shortDescription.txt").withWriter { writer ->
        writer.write(fullShortDescription.toString())
    }
    new File("../app/description.txt").withWriter { writer ->
        writer.write(fullDescription.toString())
    }
}

def prepareApplicationMediaFiles(def json) {
    download(json.icon, String.format(artifactPath, "icon_template.png"))
    execute("python2.7", "crop_image.py")
}

task prepareResources {
    doLast {
        def fileName = getLastCommitChangeList(getLastCommitHash())
        def file = new File(fileName)
        def json = new JsonSlurper().parseText(file.text)
        prepareApplicationResources(json)
        prepareApplicationDescription(json)
        prepareApplicationMediaFiles(json)
    }
}
